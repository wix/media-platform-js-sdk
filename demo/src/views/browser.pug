include ./mixins/nav-bar
include ./mixins/styles

doctype html
html()
    head
        title Wix Media Platform - SDK Browser Demo

        script(src="/media-platform.bundle.js")
        script(src="/utils.js")
        script(src="/prismjs/prism.js")
        link(href="/prismjs/themes/prism.css" type="text/css" rel="stylesheet")
        +styles

        script.
            var mediaPlatform = new MP.MediaPlatform({
                domain: 'wixmp-410a67650b2f46baa5d003c6.appspot.com',
                authenticationUrl: 'http://' + location.host + '/media-platform/auth-header'
            });

            var Image = MP.Image;
            var Source = MP.Source;
            var Destination = MP.Destination;
            var QualityRange = MP.QualityRange;
            var UploadUrlRequest = MP.file.UploadUrlRequest;
            var ImportFileRequest = MP.file.ImportFileRequest;
            var TranscodeRequest = MP.transcode.TranscodeRequest;
            var ExtractPosterRequest = MP.transcode.ExtractPosterRequest;
            var ExtractStoryboardRequest = MP.transcode.ExtractStoryboardRequest;
            var ExtractArchiveRequest = MP.archive.ExtractArchiveRequest;
            var CreateArchiveRequest = MP.archive.CreateArchiveRequest;
            var TranscodeSpecification = MP.transcode.TranscodeSpecification;
            var ExtractPosterSpecification = MP.transcode.ExtractPosterSpecification;
            var ExtractStoryboardSpecification = MP.transcode.ExtractStoryboardSpecification;
            var CreateFlowRequest = MP.flow.CreateFlowRequest;
            var Invocation = MP.flow.Invocation;
            var FlowComponent = MP.flow.FlowComponent;

            var fileHost = 'wixmp-410a67650b2f46baa5d003c6.wixmp.com';
            var imagesHost = 'images-wixmp-410a67650b2f46baa5d003c6.wixmp.com';
            var videosHost = 'wixmp-410a67650b2f46baa5d003c6.wixmp.com';

    body

        +nav-bar

        .content
            .group
                h2#Instantiation Instantiation
                .highlight
                    pre
                        code.language-javascript.
                            var mediaPlatform = new MP.MediaPlatform({
                                domain: 'wixmp-410a67650b2f46baa5d003c6.appspot.com',
                                authenticationUrl: 'http://localhost:3333/media-platform/auth-header'
                            });

                h2#FileManagementApi File Management API
                    h4 Import a file from URL (any mime type)
                    .highlight
                        pre
                            code.language-javascript.
                                var importFileRequest = new ImportFileRequest()
                                     .setDestination(
                                        new Destination()
                                            .setPath("/destination/file.ext")
                                            .setAcl("public")
                                     ).setSourceUrl(fileUrl);


                                 mediaPlatform.fileManager.importFile(importFileRequest, function(error, data) {
                                    // handle result
                                 });
                    .demo-group
                        input(id='file-import-id-input' type='text' placeholder='Enter Remote File URL (http://)').text-input
                        br
                        .executable-button
                            button#file-import-button.btn.
                                Execute
                            .spinner
                            span#file-import-job-status.path-to-file
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-import-payload
                    h4 Upload a file (any mime type)
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.uploadFile(path, file)
                                    .on('upload-progress', function(event) {
                                        // handle progress
                                    })
                                    .on('upload-success', function(event) {
                                        // handle success
                                    })
                                    .on('upload-error', function(event) {
                                        // handle error
                                    });

                    .demo-group
                        .executable-button
                            label(for='file-management' id="file-management-label").btn.
                                Upload File
                            .spinner
                            span#file-management-path.path-to-file
                            form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                                input(id='file-management' name='file' type='file')

                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-management-payload
                    h4 Queued file upload (any MIME type)
                    .highlight
                        pre
                            code.language-javascript.
                                var uploadJob = new MP.upload.UploadJob();

                                uploadJob
                                    .setPath(path)
                                    .setFile(file)
                                    .on('upload-success', function (response) {
                                        // handle success
                                    });

                                mediaPlatform.fileManager.queueFileUpload(uploadJob);
                    .demo-group
                        .executable-button
                            label(for='queued-file-management' id="queued-file-management-label").btn.
                                Upload File
                            .spinner
                            span#queued-file-management-path.path-to-file
                            form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                                input(id='queued-file-management' name='file' type='file')

                        .highlight.highlight-response
                            pre
                                code.language-javascript#queued-file-management-payload

                    h4 Retrieve a list of uploaded files
                    .highlight
                        pre
                            code.language-javascript.
                                var listFileRequest = new MP.file.ListFilesRequest().setPageSize(3);

                                mediaPlatform.fileManager.listFiles(path, listFilesRequest, function(error, response) {
                                    // do something
                                });

                    .demo-group
                        .executable-button
                            button#file-list-button.btn.
                                Execute
                            .spinner

                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-list-payload

                    h4 Get file metadata by id
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                                    // do something
                                });
                    .demo-group
                        input(id='file-metadata-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        .executable-button
                            button#file-metadata-button.btn.
                                Execute
                            .spinner
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-metadata-payload

                    h4 Delete file by id
                    .highlight
                        pre
                            code.language-javascript.
                                mediaPlatform.fileManager.deleteFileById(fileId, function(error, response) {
                                    // do something
                                });
                    .demo-group
                        input(id='file-delete-id-input' type='text' placeholder='Enter File ID').text-input
                        br
                        .executable-button
                            button#file-delete-button.btn.
                                Execute
                            .spinner
                        .highlight.highlight-response
                            pre
                                code.language-javascript#file-delete-payload

                h2#ImageApi Image API
                    H4 Upload image
                    .highlight
                        pre
                            code.language-javascript#image-manipulation-code.
                                mediaPlatform.fileManager.uploadFile(path, file)
                                    .on('upload-success', function(event) {
                                        var image = new MP.Image(event.fileDescriptors[0]);

                                        image.crop(500, 500)
                                            .jpeg(100, true)
                                            .blur(50)
                                            .toUrl()
                                            .url;
                                  });

                    .demo-group
                        .executable-button
                            label(for='image-file' id='image-file-label' ).btn.
                                Upload Image
                            .spinner
                            span#image-file-path.path-to-file
                            form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                                input(id='image-file' name='file' type='file' accept='image/*')

                        select(id='image-manipulation-filters').filters-select
                            option(value='blur;50', selected= true) Blur
                            option(value='brightness;50') Brightness
                            option(value='contrast;50') Contrast
                            option(value='hue;50') Hue
                            option(value='saturation;-70') Saturation
                            option(value='unsharpMask;5.5,4.23,9.56') Unsharp Mask

                        .response
                            .highlight.highlight-response.url-block3
                                pre
                                    code.language-javascript#image-payload.

                            .output
                                img#image-output(src="/assets/img/no-preview.png")

                h2#VideoApi Video API
                H4 Upload Video
                .highlight
                    pre
                        code.language-javascript.
                            mediaPlatform.fileManager.uploadFile(path, file)
                                .on('upload-success', function(response) {
                                    // handle success
                                });

                .demo-group
                    .executable-button
                        label(for='video-file' id='video-file-label').btn.
                            Upload Video
                        .spinner
                        span#video-file-path.path-to-file
                        form(enctype='multipart/form-data' action='' method='post' target='upload-result')
                            input(id='video-file' name='file' type='file' accept='video/*')

                    .response
                        .highlight.highlight-response
                            pre
                                code.language-javascript#video-payload.

                        .output
                            video#video-output(controls=true)

                h2#ArchiveApi Archive API
                H4 Create Archive
                .highlight
                    pre
                        code.language-javascript.
                            var createArchiveRequest = new CreateArchiveRequest();
                            var destination = new Destination();
                            destination.setPath("/fish/file.zip").setAcl('public');

                            var source = new Source();
                            source.fileId = "#archive-file-id";
                            createArchiveRequest.setDestination(destination)
                                                .addSource(source)
                                                .setArchiveType('zip');

                            mediaPlatform.archiveManager.createArchive(createArchiveRequest, function(job, error) {
                                // handle job success
                            });
                .demo-group
                    input(id='create-archive-id-input' type='text' placeholder='Enter File ID').text-input
                    br
                    input(id='create-archive-destination-input' type='text' placeholder='Enter Destination Path').text-input
                    br
                    input(id='create-archive-destination-acl-input' type='text' placeholder='Enter Destination ACL').text-input
                    br
                    input(id='create-archive-type-input' type='text' placeholder='Enter Archive Type').text-input
                    br
                    .executable-button
                        button#create-archive-button.btn.
                            Execute
                        .spinner
                    .highlight.highlight-response
                        pre
                            code.language-javascript#create-archive-payload
                H4 Extract Archive
                .highlight
                    pre
                        code.language-javascript.
                            var extractArchiveRequest = new ExtractArchiveRequest();
                            var destination = new Destination();
                            destination.setDirectory("/fish").setAcl('public');

                            var source = new Source();
                            source.fileId = "#archive-file-id";

                            extractArchiveRequest.setDestination(destination)
                                                 .setSource(source);

                            mediaPlatform.archiveManager.extractArchive(extractArchiveRequest, function(job, error) {
                                // handle job success
                            });
                .demo-group
                    input(id='extract-archive-id-input' type='text' placeholder='Enter File ID').text-input
                    br
                    input(id='extract-archive-destination-input' type='text' placeholder='Enter Destination Path').text-input
                    br
                    input(id='extract-archive-destination-acl-input' type='text' placeholder='Enter Destination ACL').text-input
                    br
                    .executable-button
                        button#extract-archive-button.btn.
                            Execute
                        .spinner
                    .highlight.highlight-response
                        pre
                            code.language-javascript#extract-archive-payload

                h2#TranscodeApi Transcode API
                H4 Transcode Video
                .highlight
                    pre
                        code.language-javascript.
                            var source = new Source();
                            source.fileId = fileId;

                            var transcodeSpecification = new TranscodeSpecification();
                            transcodeSpecification.destination = new Destination()
                                .setDirectory("/test/output")
                                .setAcl("public");

                            transcodeSpecification.qualityRange = new QualityRange({minimum: "240p", maximum: "1440p"});

                            var transcodeRequest = new TranscodeRequest()
                                .addSource(source)
                                .addSpecification(transcodeSpecification);

                            mediaPlatform.avManager.transcodeVideo(transcodeRequest, function(error, response) {
                                // handle success
                            });

                .demo-group
                    input(id='transcode-video-id-input' type='text' placeholder='Enter File ID').text-input
                    br
                    .executable-button
                        button#transcode-video-button.btn.
                            Execute
                        .spinner
                        span#transcode-job-status.path-to-file
                    .highlight.highlight-response
                        pre
                            code.language-javascript#transcode-video-payload
                H4 Extract Poster from Video
                .highlight
                    pre
                        code.language-javascript.
                            var source = new Source();
                            source.fileId = fileId;

                            var extractPosterSpecification = new ExtractPosterSpecification();
                            extractPosterSpecification.destination = new Destination()
                                .setDirectory("/test/output")
                                .setAcl("public");

                            extractPosterSpecification.format = "jpg";
                            
                            extractPosterSpecification.second = 1;

                            var extractPosterRequest = new ExtractPosterRequest()
                                .addSource(source)
                                .addSpecification(extractPosterSpecification);

                            mediaPlatform.avManager.extractPoster(extractPosterRequest, function(error, response) {
                                // handle success
                            });

                .demo-group
                    input(id='extract-poster-id-input' type='text' placeholder='Enter File ID').text-input
                    br
                    .executable-button
                        button#extract-poster-button.btn.
                            Execute
                        .spinner
                        span#extract-poster-job-status.path-to-file
                    div#extract-poster-image
                    .highlight.highlight-response
                        pre
                            code.language-javascript#extract-poster-payload

                H4 Extract Storyboard from Video
                .highlight
                    pre
                        code.language-javascript.
                            var source = new Source();
                            source.fileId = fileId;

                            var extractStoryboardSpecification = new ExtractStoryboardSpecification();
                            extractStoryboardSpecification.destination = new Destination()
                                .setDirectory("/test/output")
                                .setAcl("public");

                            extractStoryboardSpecification.format = "jpg";

                            extractStoryboardSpecification.columns = 6;
                            extractStoryboardSpecification.rows = 4;
                            extractStoryboardSpecification.tileWidth = 100;
                            extractStoryboardSpecification.tileHeight = 40;

                            var extractStoryboardRequest = new ExtractStoryboardRequest()
                                .addSource(source)
                                .addSpecification(extractStoryboardSpecification);

                            mediaPlatform.avManager.extractStoryboard(extractStoryboardRequest, function(error, response) {
                                // handle success
                            });

                .demo-group
                    input(id='extract-storyboard-id-input' type='text' placeholder='Enter File ID').text-input
                    br
                    .executable-button
                        button#extract-storyboard-button.btn.
                            Execute
                        .spinner
                        span#extract-storyboard-job-status.path-to-file
                    div#extract-storyboard-image
                    .highlight.highlight-response
                        pre
                            code.language-javascript#extract-storyboard-payload

                h2#FlowManagerApi Flow Manager API
                H4 Invoke Flow on Remote Url
                .highlight
                    pre
                        code.language-javascript.
                            var invocation = new Invocation()
                                .addEntryPoint("import");

                            var importFileRequest = new ImportFileRequest()
                                .setDestination(new Destination().setPath("/testflow/imported/file_" + Date.now() + ".mp4").setAcl("public"))
                                .setSourceUrl(fileUrl);

                            var importComponent = new FlowComponent()
                                .setType('file.import')
                                .setSpecification(importFileRequest)
                                .addSuccessor('transcode');

                            var transcodeSpecification = new TranscodeSpecification()
                                .setDestination(new Destination()
                                    .setDirectory("/testflow/transcoded")
                                    .setAcl("public")
                            ).setQualityRange(new QualityRange({minimum: "240p", maximum: "1440p"} ));

                            var transcodeComponent = new FlowComponent()
                            .setType('av.transcode')
                                .setSpecification(transcodeSpecification)
                                .setSuccessors([]);

                            var createFlowRequest = new CreateFlowRequest()
                                .setInvocation(invocation)
                                .addFlowComponent("import", importComponent)
                                .addFlowComponent("transcode", transcodeComponent);


                            mediaPlatform.flowManager.createFlow(createFlowRequest, function(error, data) {
                                // handle success
                            });

                .demo-group
                    input(id='flow-manager-id-input' type='text' placeholder='Enter Remote File URL (http://)').text-input
                    br
                    .executable-button
                        button#flow-manager-button.btn.
                            Execute
                        .spinner
                        span#flow-manager-job-status.path-to-file
                    .highlight.highlight-response
                        pre
                            code.language-javascript#flow-manager-payload


                h2#download-url Signed URL
                    h4 Get a signed URL that directs to a file, required for non-public file download
                    #download-url-code
                        .highlight
                            pre
                                code.language-javascript.
                                    mediaPlatform.getDownloadUrl(path, null, function(error, response) {
                                        // do something
                                    });
                        .demo-group
                            input(id='download-url-input' type='text' placeholder='Enter File Path').text-input
                            br
                            .executable-button
                                button(id='download-url-button').btn.
                                    Execute
                                .spinner
                            .highlight.highlight-response
                                pre
                                    code.language-javascript#download-url-payload

                h2#extract-image- Image Extraction
                    h4 Manages the various feature extraction processors, such as face detection
                    #extract-image-by-id-code
                        .highlight
                            pre
                                code.language-javascript.
                                    mediaPlatform.imageExtractionManager.extractImageById(fileId, null, function(error, response) {
                                        // do something
                                    });
                        .demo-group
                            input(id='extract-image-by-id-input' type='text' placeholder='Enter File Id').text-input
                            br
                            .executable-button
                                button(id='extract-image-by-id-button').btn.
                                    Execute
                                .spinner
                            .highlight.highlight-response
                                pre
                                    code.language-javascript#extract-image-by-id-payload

                    h4 Manages the various feature extraction processors, such as face detection
                    #extract-image-by-file-code
                        .highlight
                            pre
                                code.language-javascript.
                                    mediaPlatform.imageExtractionManager.extractImageByFilePath(filePath, null, function(error, response) {
                                        // do something
                                    });
                        .demo-group
                            input(id='extract-image-by-path-input' type='text' placeholder='Enter File Path').text-input
                            br
                            .executable-button
                                button(id='extract-image-by-path-button').btn.
                                    Execute
                                .spinner
                            .highlight.highlight-response
                                pre
                                    code.language-javascript#extract-image-by-path-payload

                    h4 Packaging Service
                        #packaging-service
                            .highlight
                                pre
                                    code.language-javascript.
                                        mediaPlatform.avManager.packageVideo({ sources: [], directory: '/demo'..... })
                                            .then(function (response) {
                                                // do something
                                            });
                            .demo-group
                                input(id='packaging-service-input-file-path' type='text' placeholder='Enter File Path').text-input
                                br
                                input(id='packaging-service-input-file-name' type='text' placeholder='Enter File Name').text-input
                                br
                                input(id='packaging-service-input-directory' type='text' placeholder='Enter Directory').text-input
                                br
                                input(id='packaging-service-input-acl' type='text' placeholder='Enter ACL').text-input
                                br
                                input(id='packaging-service-input-chunk-duration' type='text' placeholder='Enter Chunk Duration').text-input
                                br
                                input(id='packaging-service-input-package-type' type='text' placeholder='Enter Package Type').text-input
                                br
                                .executable-button
                                    button(id='packaging-service-button').btn.
                                        Execute
                                    .spinner
                                .highlight.highlight-response
                                    pre
                                        code.language-javascript#packaging-service-payload

        script.
            var PATH_BASE = "/demo/";

            // FILE MANAGEMENT API

            (function() {

                // upload file
                var fileUploadButton = document.getElementById('file-management');
                var fileManagementLabel = document.getElementById('file-management-label');
                var fileUploadPayload = document.getElementById('file-management-payload');
                var fileUploadPath = document.getElementById('file-management-path');

                fileUploadButton.addEventListener('change', function() {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    fileUploadPath.innerHTML = path;

                    // TODO: make callback optional
                    startLoading(fileManagementLabel);
                    mediaPlatform.fileManager.deleteFileByPath(path, function(error, response) {
                        mediaPlatform.fileManager
                            .uploadFile(path, file)
                            .on('upload-success', function (response) {
                                stopLoading(fileManagementLabel);

                                fileUploadPayload.innerHTML = Prism.highlight(
                                    JSON.stringify(response.fileDescriptors, null, 2),
                                    Prism.languages.js);
                            })
                            .on('upload-error', function () {
                                stopLoading(fileManagementLabel);
                            });
                    });
                });


                // queued file upload
                var queuedFileUploadButton = document.getElementById('queued-file-management');
                var queuedFileManagementLabel = document.getElementById('queued-file-management-label');
                var queuedFileUploadPayload = document.getElementById('queued-file-management-payload');
                var queuedFileUploadPath = document.getElementById('queued-file-management-path');

                queuedFileUploadButton.addEventListener('change', function() {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    queuedFileUploadPath.innerHTML = path;


                    startLoading(queuedFileManagementLabel);
                    mediaPlatform.fileManager.deleteFileByPath(path, function(error, response) {
                      var uploadJob = new MP.upload.UploadJob();

                      uploadJob
                        .setPath(path)
                        .setFile(file)
                        .on('upload-success', function (response) {
                          stopLoading(queuedFileManagementLabel);

                          queuedFileUploadPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response.fileDescriptors, null, 2),
                            Prism.languages.js
                          );
                        })
                        .on('upload-error', function () {
                          stopLoading(queuedFileManagementLabel);
                        });

                      mediaPlatform.fileManager.queueFileUpload(uploadJob);
                    });
                });

                // get list of files
                var fileListButton = document.getElementById('file-list-button');
                var fileListPayload = document.getElementById('file-list-payload');

                fileListButton.addEventListener('click', function() {
                    var listFileRequest = new MP.file.ListFilesRequest().setPageSize(3);

                    startLoading(fileListButton);
                    mediaPlatform.fileManager
                        .listFiles('/demo', listFileRequest, function(error, response) {
                            stopLoading(fileListButton);
                            if (error) {
                                console.error('error', error);
                                return
                            }

                            fileListPayload.innerHTML = Prism.highlight(
                                JSON.stringify(response, null, 2),
                                Prism.languages.js
                            );
                        });
                });

                // get file metadata by id
                var fileMetadataButton = document.getElementById('file-metadata-button');
                var fileMetadataInput = document.getElementById('file-metadata-id-input');
                var fileMetadataPayload = document.getElementById('file-metadata-payload');

                fileMetadataButton.addEventListener('click', function() {
                    var fileId = fileMetadataInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(fileMetadataButton);
                    mediaPlatform.fileManager.getFileMetadataById(fileId, function(error, response) {
                        stopLoading(fileMetadataButton);
                        fileMetadataPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);
                    });
                })

                // delete file by id
                var fileDeleteButton = document.getElementById('file-delete-button');
                var fileDeleteInput = document.getElementById('file-delete-id-input');
                var fileDeletePayload = document.getElementById('file-delete-payload');

                fileDeleteButton.addEventListener('click', function () {
                    var fileId = fileDeleteInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(fileDeleteButton);
                    mediaPlatform.fileManager.deleteFileById(fileId, function (error, response) {
                        stopLoading(fileDeleteButton);
                        fileDeletePayload.innerHTML = Prism.highlight(
                            JSON.stringify(response || error, null, 2),
                            Prism.languages.js);
                    });
                })

                // get secure url
                var downloadUrlButton = document.getElementById('download-url-button');
                var downloadUrlInput = document.getElementById('download-url-input');
                var downloadUrlPayload = document.getElementById('download-url-payload');

                downloadUrlButton.addEventListener('click', function () {
                    var path = downloadUrlInput.value;
                    if (!path) {
                        console.log('please specify file path');
                        return
                    }

                    startLoading(downloadUrlButton);
                    mediaPlatform.getDownloadUrl(path, null, function (error, response) {
                        stopLoading(downloadUrlButton);
                        downloadUrlPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response || error, null, 2),
                            Prism.languages.js);
                    });
                })
            })();


            // IMAGE API
            (function() {
                var imageFile = document.getElementById("image-file");
                var imageFileLabel = document.getElementById("image-file-label");
                var imageOutput = document.getElementById("image-output");
                var imagePayload = document.getElementById("image-payload");
                var imageFilePath = document.getElementById("image-file-path");
                var imageManipulationFilters = document.getElementById("image-manipulation-filters");
                var imageManipulationCode = document.getElementById("image-manipulation-code");
                var imageDescriptor;

                function getImageManipulationCode() {
                    var filter = imageManipulationFilters.value.split(';');
                    var filterName = filter[0];
                    var value = filter[1];

                    var filterFnText = filterName && value ? '.' + filterName + '(' + value + ')\n' : '';

                    return 'mediaPlatform.fileManager.uploadFile(path, file)\n' +
                        '       .on(\'upload-success\', function(event) {\n' +
                        '           var image = new MP.Image(event.fileDescriptors[0]);\n\n' +
                        '           image.crop(500, 500)\n' +
                        '               .jpeg(100, true)\n' +
                        '               ' + filterFnText +
                        '               .toUrl()\n' +
                        '               .url;\n' +
                        '  });'

                }

                function parseFilterValue(filterValue) {
                    var fnName = filterValue.split(';')[0];
                    // to array with numbers
                    var args = filterValue.split(';')[1].split(',').map(function (val) {
                        return +val
                    });

                    return [fnName, args];
                }

                imageFile.addEventListener('change', function () {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];
                    var filterValueArr = parseFilterValue(imageManipulationFilters.value);


                    imageFilePath.innerHTML = path;

                    startLoading(imageFileLabel);
                    // TODO: make callback optional
                    mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                        // do nothing...
                    });

                    var fnName = filterValueArr[0];
                    var args = filterValueArr[1];

                    mediaPlatform.fileManager
                        .uploadFile(path, file)
                        .on('upload-success', function (response) {
                            stopLoading(imageFileLabel);
                            var descriptors = response.fileDescriptors;
                            var descriptor = imageDescriptor = descriptors[0];

                            // set payload
                            imagePayload.innerHTML = Prism.highlight(
                                JSON.stringify(descriptor, null, 2),
                                Prism.languages.js);

                            var image = new MP.Image(descriptor);

                            image
                                .crop(500, 500)
                                .jpeg(100, true);

                            // apply filter
                            image[fnName].apply(image, args);

                            var url = "http://" + imagesHost + image.toUrl().url;

                            // set image
                            imageOutput.setAttribute("src", url);
                        })
                        .on('upload-error', function(error) {
                            console.error('upload error:', error);
                            stopLoading(imageFileLabel);
                        });
                });

                imageManipulationFilters.addEventListener('change', function() {

                    imageManipulationCode.innerHTML = Prism.highlight(getImageManipulationCode(), Prism.languages.js)

                    if (!imageDescriptor) return

                    var filterValueArr = parseFilterValue(this.value);
                    var fnName = filterValueArr[0];
                    var args = filterValueArr[1];

                    var image = new MP.Image(imageDescriptor);

                    image
                        .crop(500, 500)
                        .jpeg(100, true);

                    // apply filter
                    image[fnName].apply(image, args);

                    var url = "http://" + imagesHost + image.toUrl().url;

                    // set image
                    imageOutput.setAttribute("src", url);
                });
            })();


            // VIDEO API
            (function () {
                var videoFile = document.getElementById('video-file');
                var videoFileLabel = document.getElementById('video-file-label');
                var videoOutput = document.getElementById('video-output');
                var videoPayload = document.getElementById('video-payload');
                var videoFilePath = document.getElementById('video-file-path');

                videoFile.addEventListener('change', function () {
                    var path = PATH_BASE + this.value.split("\\").pop();
                    var file = this.files[0];

                    videoFilePath.innerHTML = path;

                    // TODO: make callback optional
                    startLoading(videoFileLabel);
                    mediaPlatform.fileManager.deleteFileByPath(path, function (error, response) {
                        mediaPlatform.fileManager
                            .uploadFile(path, file)
                            .on('upload-success', function (event) {
                                stopLoading(videoFileLabel);
                                var videos = event.fileDescriptors;
                                var video = videos[0];
                                var url = "http://" + videosHost + video.path;
                                var html = Prism.highlight(JSON.stringify(video, null, 2), Prism.languages.js);

                                videoOutput.setAttribute('src', url);
                                videoPayload.innerHTML = html;
                            })
                            .on('upload-error', function (err) {
                                stopLoading(videoFileLabel);
                                console.error('upload error:', err);
                            });
                    });
                })
            })();

            // ARCHIVE API
            (function () {
                // create archive by id
                var createArchiveButton = document.getElementById('create-archive-button');
                var createArchiveInput = document.getElementById('create-archive-id-input');
                var createArchiveDestination = document.getElementById('create-archive-destination-input');
                var createArchiveDestinationAcl = document.getElementById('create-archive-destination-acl-input');
                var createArchiveType = document.getElementById('create-archive-type-input');
                var createArchivePayload = document.getElementById('create-archive-payload');

                createArchiveButton.addEventListener('click', function () {
                    var fileId = createArchiveInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    var destinationPath = createArchiveDestination.value;
                    if (!destinationPath) {
                        console.log('please specify destination path');
                        return
                    }

                    var archiveType = createArchiveType.value;
                    if (!archiveType) {
                        console.log('please specify archive type (zip, gzip, etc..)');
                        return
                    }

                    var destinationAcl = createArchiveDestinationAcl.value;
                    if (!destinationAcl || (destinationAcl !== "private" && destinationAcl !== "public")) {
                        console.log('please specify destination acl (private or public)');
                        return
                    }

                    var createArchiveRequest = new CreateArchiveRequest();
                    var destination = new Destination();
                    destination.setDirectory(destinationPath).setAcl(destinationAcl);

                    var source = new Source();
                    source.fileId = fileId;

                    createArchiveRequest.setDestination(destination).addSource(source).setArchiveType(archiveType);

                    startLoading(createArchiveButton);
                    mediaPlatform.archiveManager.createArchive(createArchiveRequest, function (error, response) {
                        stopLoading(createArchiveButton);
                        createArchivePayload.innerHTML = Prism.highlight(
                            JSON.stringify(response || error, null, 2),
                            Prism.languages.js);
                    });
                })


                // extract archive by id
                var extractArchiveButton = document.getElementById('extract-archive-button');
                var extractArchiveInput = document.getElementById('extract-archive-id-input');
                var extractArchiveDestination = document.getElementById('extract-archive-destination-input');
                var extractArchiveDestinationAcl = document.getElementById('extract-archive-destination-acl-input');
                var extractArchivePayload = document.getElementById('extract-archive-payload');

                extractArchiveButton.addEventListener('click', function () {
                    var fileId = extractArchiveInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    var destinationPath = extractArchiveDestination.value;
                    if (!destinationPath) {
                        console.log('please specify destination path');
                        return
                    }

                    var destinationAcl = extractArchiveDestinationAcl.value;
                    if (!destinationAcl || (destinationAcl !== "private" && destinationAcl !== "public")) {
                        console.log('please specify destination acl (private or public)');
                        return
                    }

                    var extractArchiveRequest = new ExtractArchiveRequest();
                    var destination = new Destination();
                    destination.setDirectory(destinationPath).setAcl(destinationAcl);

                    var source = new Source();
                    source.fileId = fileId;

                    extractArchiveRequest.setDestination(destination).setSource(source);

                    startLoading(extractArchiveButton);
                    mediaPlatform.archiveManager.extractArchive(extractArchiveRequest, function (error, response) {
                        stopLoading(extractArchiveButton);
                        extractArchivePayload.innerHTML = Prism.highlight(
                            JSON.stringify(response || error, null, 2),
                            Prism.languages.js);
                    });
                })
            })();


            // TRANSCODE API
            (function () {
                // transcode video file by id
                var transcodeVideoButton = document.getElementById('transcode-video-button');
                var transcodeVideoInput = document.getElementById('transcode-video-id-input');
                var transcodeVideoPayload = document.getElementById('transcode-video-payload');
                var transcodeJobStatus = document.getElementById('transcode-job-status');

                transcodeVideoButton.addEventListener('click', function () {
                    var fileId = transcodeVideoInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(transcodeVideoButton);

                    var source = new Source();
                    source.fileId = fileId;

                    var transcodeSpecification = new TranscodeSpecification({
                      destination: {
                        directory: '/test/output',
                        acl: 'public'
                      },
                      qualityRange: {minimum: "240p", maximum: "1440p"}
                    });

                    var transcodeRequest = new TranscodeRequest()
                        .addSource(source)
                        .addSpecification(transcodeSpecification);

                    mediaPlatform.avManager.transcodeVideo(transcodeRequest, function (error, response) {
                        transcodeVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);
                        // start polling
                        pollTranscodeJobStatus(response.groupId);
                    });
                });

                function pollTranscodeJobStatus(jobGroupId) {
                    mediaPlatform.jobManager.getJobGroup(jobGroupId, function (error, response) {
                        transcodeJobStatus.innerText = "Polling";
                        transcodeVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);

                        if(response.length) {
                            var success = true;
                            for(var i in response) {
                                // if at least one job has status pending, we break
                                if(response[i].status != "success") {
                                    success = false;
                                    break;
                                }
                            }

                            if(success) {
                                stopLoading(transcodeVideoButton);
                                transcodeJobStatus.innerText = "Success";
                            } else {
                                setTimeout(function () {
                                    pollTranscodeJobStatus(jobGroupId);
                                }, 5000);
                            }
                        }
                    });
                }
            })();
            
            
            // EXTRACT POSTER API
            (function () {
                // extractPoster video file by id
                var extractPosterVideoButton = document.getElementById('extract-poster-button');
                var extractPosterVideoInput = document.getElementById('extract-poster-id-input');
                var extractPosterVideoPayload = document.getElementById('extract-poster-payload');
                var extractPosterImage = document.getElementById('extract-poster-image');
                var extractPosterJobStatus = document.getElementById('extract-poster-job-status');

                extractPosterVideoButton.addEventListener('click', function () {
                    var fileId = extractPosterVideoInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(extractPosterVideoButton);

                    var source = new Source();
                    source.fileId = fileId;

                    var extractPosterSpecification = new ExtractPosterSpecification();
                    var posterFilePath = "/test/poster/file_" + Date.now() + ".jpg";
                    extractPosterSpecification.destination = new Destination()
                        .setPath(posterFilePath)
                        .setAcl("public");

                    extractPosterSpecification.format = "jpg";

                    extractPosterSpecification.second = 1;

                    var extractPosterRequest = new ExtractPosterRequest()
                        .addSource(source)
                        .addSpecification(extractPosterSpecification);

                    mediaPlatform.avManager.extractPoster(extractPosterRequest, function (error, response) {
                        if(error) {
                            stopLoading(extractPosterVideoButton);
                            return;
                        }

                        extractPosterVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);
                        // start polling
                        pollExtractPosterJobStatus(response.groupId);
                    });
                });

                function pollExtractPosterJobStatus(jobGroupId) {
                    mediaPlatform.jobManager.getJobGroup(jobGroupId, function (error, response) {
                        extractPosterJobStatus.innerText = "Polling";

                        extractPosterVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);

                        if(response.length) {
                            var success = true;
                            for(var i in response) {
                                // if at least one job has status pending, we break
                                if(response[i].status !== "success") {
                                    success = false;
                                    break;
                                }
                            }

                            if(success) {
                                stopLoading(extractPosterVideoButton);
                                extractPosterJobStatus.innerText = "Success";
                                var path = response[0].specification.destination.path;
                                extractPosterImage.innerHTML = "<img src='//" + imagesHost + path + "' width='400'/>"
                            } else {
                                setTimeout(function () {
                                    pollExtractPosterJobStatus(jobGroupId);
                                }, 5000);
                            }
                        }
                    });
                }
            })();

            // EXTRACT STORYBOARD API
            (function () {
                // extractStoryboard video file by id
                var extractStoryboardVideoButton = document.getElementById('extract-storyboard-button');
                var extractStoryboardVideoInput = document.getElementById('extract-storyboard-id-input');
                var extractStoryboardVideoPayload = document.getElementById('extract-storyboard-payload');
                var extractStoryboardImage = document.getElementById('extract-storyboard-image');
                var extractStoryboardJobStatus = document.getElementById('extract-storyboard-job-status');

                extractStoryboardVideoButton.addEventListener('click', function () {
                    var fileId = extractStoryboardVideoInput.value;
                    if (!fileId) {
                        console.log('please specify fileId');
                        return
                    }

                    startLoading(extractStoryboardVideoButton);

                    var source = new Source();
                    source.fileId = fileId;

                    var extractStoryboardSpecification = new ExtractStoryboardSpecification();
                    var storyboardFilePath = "/test/storyboard/file_" + Date.now() + ".jpg";
                    extractStoryboardSpecification.destination = new Destination()
                        .setPath(storyboardFilePath)
                        .setAcl("public");

                    extractStoryboardSpecification.format = "jpg";

                    extractStoryboardSpecification.columns = 6;
                    extractStoryboardSpecification.rows = 4;
                    extractStoryboardSpecification.tileWidth = 200;
                    extractStoryboardSpecification.tileHeight = 100;
                    var extractStoryboardRequest = new ExtractStoryboardRequest()
                        .addSource(source)
                        .addSpecification(extractStoryboardSpecification);

                    mediaPlatform.avManager.extractStoryboard(extractStoryboardRequest, function (error, response) {
                        if(error) {
                            stopLoading(extractStoryboardVideoButton);
                            return;
                        }
                        extractStoryboardVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);
                        // start polling
                        pollExtractStoryboardJobStatus(response.groupId);
                    });
                });

                function pollExtractStoryboardJobStatus(jobGroupId) {
                    mediaPlatform.jobManager.getJobGroup(jobGroupId, function (error, response) {
                        extractStoryboardJobStatus.innerText = "Polling";

                        extractStoryboardVideoPayload.innerHTML = Prism.highlight(
                            JSON.stringify(response, null, 2),
                            Prism.languages.js);

                        if(response.length) {
                            var success = true;
                            for(var i in response) {
                                // if at least one job has status pending, we break
                                if(response[i].status !== "success") {
                                    success = false;
                                    break;
                                }
                            }

                            if(success) {
                                stopLoading(extractStoryboardVideoButton);
                                extractStoryboardJobStatus.innerText = "Success";
                                var path = response[0].specification.destination.path;
                                extractStoryboardImage.innerHTML = "<img src='//" + imagesHost + path + "' width='400'/>"
                            } else {
                                setTimeout(function () {
                                    pollExtractStoryboardJobStatus(jobGroupId);
                                }, 5000);
                            }
                        }
                    });
                }
            })();

            // FLOW Manager API
            (function () {
                // flow manager file by id
                var flowManagerButton = document.getElementById('flow-manager-button');
                var flowManagerInput = document.getElementById('flow-manager-id-input');
                var flowManagerPayload = document.getElementById('flow-manager-payload');
                var flowManagerJobStatus = document.getElementById('flow-manager-job-status');

                flowManagerButton.addEventListener('click', function () {
                    var fileUrl = flowManagerInput.value;
                    if (!fileUrl) {
                        console.log('please specify URL');
                        return
                    }

                    startLoading(flowManagerButton);

                    var invocation = new Invocation()
                        .addEntryPoint("import");

                    var importFileRequest = new ImportFileRequest()
                        .setDestination(new Destination().setPath("/testflow/imported/file_" + Date.now() + ".mp4").setAcl("public"))
                        .setSourceUrl(fileUrl);

                    var importComponent = new FlowComponent()
                        .setType('file.import')
                        .setSpecification(importFileRequest)
                        .addSuccessor('transcode');

                    var transcodeSpecification = new TranscodeSpecification()
                        .setDestination(new Destination()
                            .setDirectory("/testflow/transcoded")
                            .setAcl("public")
                    ).setQualityRange(new QualityRange({minimum: "240p", maximum: "1440p"} ));

                    var transcodeComponent = new FlowComponent()
                    .setType('av.transcode')
                        .setSpecification(transcodeSpecification)
                        .setSuccessors([]);

                    var createFlowRequest = new CreateFlowRequest()
                        .setInvocation(invocation)
                        .addFlowComponent("import", importComponent)
                        .addFlowComponent("transcode", transcodeComponent);


                    mediaPlatform.flowManager.createFlow(createFlowRequest, function(error, data) {
                        flowManagerPayload.innerHTML = Prism.highlight(
                            JSON.stringify(data, null, 2),
                            Prism.languages.js);
                        // start polling
                        pollFlowManagerJobStatus(data.id);
                    });

                });

                function pollFlowManagerJobStatus(flowId) {
                    mediaPlatform.flowManager.getFlow(flowId, function (error, response) {
                        flowManagerJobStatus.innerText = "Polling";

                        var t = setTimeout(function () {
                            pollFlowManagerJobStatus(flowId);
                        }, 5000);


                        if(response && response.flow && Object.keys(response.flow).length ) {
                            flowManagerPayload.innerHTML = Prism.highlight(
                                JSON.stringify(response, null, 2),
                                Prism.languages.js);

                            var success = true;
                            var failed = false;
                            for(var i in response.flow) {
                                // if at least one job has status error, we break
                                if(response.flow[i].status === "error") {
                                    failed = true;
                                    break;
                                }
                                // if at least one job has status pending, we break
                                if(response.flow[i].status !== "success") {
                                    success = false;
                                    break;
                                }
                            }

                            if (failed) {
                                stopLoading(flowManagerButton);
                                clearTimeout(t);
                                flowManagerJobStatus.innerText = "Error";
                            } else if(success) {
                                stopLoading(flowManagerButton);
                                clearTimeout(t);
                                flowManagerJobStatus.innerText = "Success";
                            }
                        }

                    });
                }
            })();

            // File Import API
            (function () {
                // import file from url
                var fileImportButton = document.getElementById('file-import-button');
                var fileImportInput = document.getElementById('file-import-id-input');
                var fileImportPayload = document.getElementById('file-import-payload');
                var fileImportJobStatus = document.getElementById('file-import-job-status');

                fileImportButton.addEventListener('click', function () {
                    var fileUrl = fileImportInput.value;
                    if (!fileUrl) {
                        console.log('please specify URL');
                        return
                    }

                    startLoading(fileImportButton);

                    var importFileRequest = new ImportFileRequest()
                        .setDestination(new Destination().setPath("/testimport/file_" + Date.now() + ".mp4").setAcl("public"))
                        .setSourceUrl(fileUrl);


                    mediaPlatform.fileManager.importFile(importFileRequest, function(error, data) {
                        fileImportPayload.innerHTML = Prism.highlight(
                            JSON.stringify(data, null, 2),
                            Prism.languages.js);
                        // start polling
                        pollFileImportJobStatus(data.id);
                    });

                });

                function pollFileImportJobStatus(jobId) {
                    mediaPlatform.jobManager.getJob(jobId, function (error, response) {
                        fileImportJobStatus.innerText = "Polling";

                        var t = setTimeout(function () {
                            pollFileImportJobStatus(jobId);
                        }, 5000);


                        if(response && response.id ) {
                            fileImportPayload.innerHTML = Prism.highlight(
                                JSON.stringify(response, null, 2),
                                Prism.languages.js);

                            var failed = false;
                            var success = false;
                            // if at least one job has status error, we break
                            if(response.status === "error") {
                                failed = true;
                           }
                            // if at least one job has status pending, we break
                            if(response.status !== "success") {
                                success = false;
                            }

                            if (failed) {
                                stopLoading(fileImportButton);
                                clearTimeout(t);
                                fileImportJobStatus.innerText = "Error";
                            } else if(success) {
                                stopLoading(fileImportButton);
                                clearTimeout(t);
                                fileImportJobStatus.innerText = "Success";
                            }
                        }

                    });
                }
            })();

            // Image Extraction API
            (function () {
              // extract by file id
              var extractImageByIdButton = document.getElementById('extract-image-by-id-button');
              var extractImageByIdInput = document.getElementById('extract-image-by-id-input');
              var extractImageByIdPayload = document.getElementById('extract-image-by-id-payload');

              extractImageByIdButton.addEventListener('click', function () {
                var id = extractImageByIdInput.value;
                if (!id) {
                  console.log('please specify file id');
                  return
                }

                startLoading(extractImageByIdButton);
                mediaPlatform.imageExtractionManager.extractImageById(id, null, function (error, response) {
                  stopLoading(extractImageByIdButton);
                  extractImageByIdPayload.innerHTML = Prism.highlight(
                    JSON.stringify(response || error, null, 2),
                    Prism.languages.js);
                });
              });

              // extract by file path
              var extractImageByPathButton = document.getElementById('extract-image-by-path-button');
              var extractImageByPathInput = document.getElementById('extract-image-by-path-input');
              var extractImageByPathPayload = document.getElementById('extract-image-by-path-payload');

              extractImageByPathButton.addEventListener('click', function () {
                var path = extractImageByPathInput.value;
                if (!path) {
                  console.log('please specify file path');
                  return
                }

                startLoading(extractImageByPathButton);
                mediaPlatform.imageExtractionManager.extractImageByFilePath(path, null, function (error, response) {
                  stopLoading(extractImageByPathButton);
                  extractImageByPathPayload.innerHTML = Prism.highlight(
                    JSON.stringify(response || error, null, 2),
                    Prism.languages.js);
                });
              })
            })();

            // Packaging Service
            (function () {
                var packagingServiceInputFilePath = document.getElementById('packaging-service-input-file-path');
                var packagingServiceInputFileName = document.getElementById('packaging-service-input-file-name');
                var packagingServiceInputDirectory = document.getElementById('packaging-service-input-directory');
                var packagingServiceInputAcl = document.getElementById('packaging-service-input-acl');
                var packagingServiceInputChunkDuration = document.getElementById('packaging-service-input-chunk-duration');
                var packagingServiceInputPackageType = document.getElementById('packaging-service-input-package-type');
                var packagingServiceButton = document.getElementById('packaging-service-button');
                var packagingServicePayload = document.getElementById('packaging-service-payload');

                packagingServiceButton.addEventListener('click', function () {
                    var path = packagingServiceInputFilePath.value;
                    var name = packagingServiceInputFileName.value;
                    var directory = packagingServiceInputDirectory.value;
                    var acl = packagingServiceInputAcl.value;
                    var chunkDuration = packagingServiceInputChunkDuration.value;
                    var packageType = packagingServiceInputPackageType.value;

                    startLoading(packagingServiceButton);
                    mediaPlatform
                      .avManager
                      .packageVideo({
                        sources: [{ path, name }],
                        directory: directory,
                        acl: acl,
                        chunkDuration: chunkDuration,
                        packageType: packageType
                      })
                      .then(function(response) {
                        stopLoading(packagingServiceButton);
                        packagingServicePayload.innerHTML = Prism.highlight(
                          JSON.stringify(response || error, null, 2),
                          Prism.languages.js
                        );
                    });
                });
            })()
